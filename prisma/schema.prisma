// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator pothos {
  provider = "prisma-pothos-types"
}

generator pothosCrud {
  provider            = "prisma-generator-pothos-codegen"
  generatorConfigPath = "./pothos.config.js"
}

datasource db {
  provider = "cockroachdb"
  url      = env("DATABASE_URL")
}

model User {
  id             String @id @default(cuid())
  email          String @unique
  name           String
  position       String
  identification String
  permissions    Json?
  avatar         String
  notifications  Json?

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deleteAt  DateTime?

  leaderOf       Project[] @relation("LeaderOf")
  collaboratorOf Project[] @relation("CollaboratorOf")

  assignmentArea   AssignmentArea? @relation(fields: [assignmentAreaId], references: [id])
  assignmentAreaId String?
  Responsibility   Responsibility? @relation("ResponsibilityCollaborators", fields: [responsibilityId], references: [id])
  responsibilityId String?
}

model Project {
  id           String      @id @default(cuid())
  name         String
  machineName  String      @unique
  description  String
  goal         Int
  progressUnit String
  archiveBox   String
  account      String
  procedures   Procedure[]
  nodes        Node[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deleteAt  DateTime?

  leader        User   @relation("LeaderOf", fields: [leaderId], references: [id])
  leaderId      String
  collaborators User[] @relation("CollaboratorOf")

  level   Level  @relation(fields: [levelId], references: [id])
  levelId String
}

enum NodeType {
  COMMENT
  NODE
}

model Node {
  id          String   @id @default(cuid())
  label       String
  description String
  type        NodeType
  meta        Json
  fromArrows  Arrow[]  @relation(name: "SourceNode")
  toArrows    Arrow[]  @relation(name: "TargetNode")
  Project     Project? @relation(fields: [projectId], references: [id])
  projectId   String?
}

model Arrow {
  id          String    @id @default(cuid())
  label       String
  source      Node      @relation(name: "SourceNode", fields: [sourceId], references: [id])
  sourceId    String
  target      Node      @relation(name: "TargetNode", fields: [targetId], references: [id])
  targetId    String
  arrowData   ArrowData @relation(fields: [arrowDataId], references: [id])
  arrowDataId String    @unique
}

model ArrowData {
  id               String         @id @default(cuid())
  requirements     Requirement[]
  responsability   Responsibility @relation(fields: [responsibilityId], references: [id])
  responsibilityId String
  indicators       Json
  procedure        Json
  arrow            Arrow?
}

model Requirement {
  id          String    @id @default(cuid())
  label       String
  machineName String
  value       Boolean
  ArrowData   ArrowData @relation(fields: [arrowDataId], references: [id])
  arrowDataId String
}

model Responsibility {
  id            String      @id @default(cuid())
  collaborators User[]      @relation("ResponsibilityCollaborators")
  ArrowData     ArrowData[]
}

model Procedure {
  id          String @id @default(cuid())
  name        String
  machineName String
  state       Json

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deleteAt  DateTime?

  projectId String
  Project   Project? @relation(fields: [projectId], references: [id])
}

model Level {
  id          String @id @default(cuid())
  name        String @unique
  machineName String @unique
  description String
  advance     Int    @default(0)
  percentage  Int    @default(0)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deleteAt  DateTime?

  levelCategoryId String
  Category        LevelCategory @relation(fields: [levelCategoryId], references: [id])

  ParentLevelId String? @unique
  ParentLevel   Level?  @relation("LevelHierarchy", fields: [ParentLevelId], references: [id])
  ChildLevels   Level[] @relation("LevelHierarchy")

  Project Project[]
}

model LevelCategory {
  id          String @id @default(cuid())
  name        String @unique
  machineName String @unique
  description String

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deleteAt  DateTime?

  ParentCategoryId String?         @map("parent_category_id")
  ParentCategory   LevelCategory?  @relation("CategoryHierarchy", fields: [ParentCategoryId], references: [id])
  ChildCategories  LevelCategory[] @relation("CategoryHierarchy")

  Levels Level[]
}

model AssignmentArea {
  id          String @id @default(cuid())
  name        String @unique
  machineName String @unique
  description String

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deleteAt  DateTime?

  ParentAreaId String?          @map("parent_area_id")
  ParentArea   AssignmentArea?  @relation("AreaHierarchy", fields: [ParentAreaId], references: [id])
  ChildAreas   AssignmentArea[] @relation("AreaHierarchy")

  User User[]
}
